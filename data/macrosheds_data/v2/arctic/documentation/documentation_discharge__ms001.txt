
This MacroSheds data product (discharge__ms001) was generated from the following munged MacroSheds product(s):

discharge__10601
discharge__20118
discharge__20120
discharge__1593
discharge__1594
discharge__1595
discharge__1596
discharge__1597
discharge__1598
discharge__1599
discharge__1600
discharge__1601
discharge__1589
discharge__1590
discharge__1591
discharge__1592
discharge__1645
discharge__1644
discharge__1646
discharge__10069
discharge__10068
discharge__10070
discharge__10591

Source data were retrieved from the following web page(s), static file(s), or web-API endpoint(s)
on the datetime in parentheses:

discharge__10601:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=10601&revision=4 (retrieved 2024-01-16 19:20:02.526931)

discharge__20118:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=20118&revision=1 (retrieved 2024-01-16 19:20:27.051044)

discharge__20120:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=20120&revision=1 (retrieved 2024-01-16 19:21:41.677698)

discharge__1593:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1593&revision=14 (retrieved 2024-01-16 19:21:49.431098)

discharge__1594:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1594&revision=13 (retrieved 2024-01-16 19:22:14.432288)

discharge__1595:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1595&revision=13 (retrieved 2024-01-16 19:22:38.680074)

discharge__1596:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1596&revision=13 (retrieved 2024-01-16 19:23:03.619996)

discharge__1597:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1597&revision=13 (retrieved 2024-01-16 19:23:28.556522)

discharge__1598:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1598&revision=13 (retrieved 2024-01-16 19:23:53.770724)

discharge__1599:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1599&revision=13 (retrieved 2024-01-16 19:24:18.458109)

discharge__1600:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1600&revision=13 (retrieved 2024-01-16 19:24:43.9273)

discharge__1601:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1601&revision=13 (retrieved 2024-01-16 19:25:08.608377)

discharge__1589:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1589&revision=13 (retrieved 2024-01-16 19:25:33.799107)

discharge__1590:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1590&revision=13 (retrieved 2024-01-16 19:25:59.067056)

discharge__1591:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1591&revision=14 (retrieved 2024-01-16 19:26:25.511281)

discharge__1592:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1592&revision=14 (retrieved 2024-01-16 19:26:50.804531)

discharge__1645:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1645&revision=12 (retrieved 2024-01-16 19:27:16.59927)

discharge__1644:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1644&revision=9 (retrieved 2024-01-16 19:27:44.517664)

discharge__1646:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=1646&revision=9 (retrieved 2024-01-16 19:28:09.716495)

discharge__10069:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=10069&revision=5 (retrieved 2024-01-16 19:28:34.385917)

discharge__10068:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=10068&revision=5 (retrieved 2024-01-16 19:28:58.939341)

discharge__10070:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=10070&revision=5 (retrieved 2024-01-16 19:29:24.505939)

discharge__10591:
https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-arc&identifier=10591&revision=2 (retrieved 2024-01-16 19:29:51.640444)

To rebuild all or part of the MacroSheds dataset yourself, use our code on GitHub (and these notes). If you want to
rebuild only this product, or if you want to modify the code used to generate this product, you
will almost certainly have an easier time using these notes. That said, automatic documentation like this may
have some errors and missing details. Please contact us at mail@macrosheds.org if you're having trouble
navigating our docs.

Below you will find the "derive kernel" function(s) by which discharge__ms001 was generated.
Note that MacroSheds products may have precursors that are themselves derived products. In some
cases, these derived precursors are named above and have their own separate documentation. In other
cases, derived precursors are generated from stand-alone derive kernels whose entire definition and
history can be displayed here. A stand-alone kernel might, for example, pull supplemental data
from a source other than its own network/domain. Here is the code for discharge__ms001's derive kernel function,
and for any stand-alone precursor derive kernel function(s):

process_2_ms001 <- function (network, domain, prodname_ms) 
{
    combine_products(network = network, domain = domain, prodname_ms = prodname_ms, 
        input_prodname_ms = c("discharge__10068", "discharge__10069", 
            "discharge__10070", "discharge__10591", "discharge__10601", 
            "discharge__1589", "discharge__1590", "discharge__1591", 
            "discharge__1592", "discharge__1593", "discharge__1594", 
            "discharge__1595", "discharge__1596", "discharge__1597", 
            "discharge__1598", "discharge__1599", "discharge__1600", 
            "discharge__1601", "discharge__1644", "discharge__1645", 
            "discharge__1646", "discharge__20118", "discharge__20120"))
}

These were the arguments to that/those function(s):

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__ms001'

Zero or more function definitions follow, depending on the number of munged products that
are precursors to discharge__ms001:

This is the "munge kernel" function for discharge__10601:

process_1_10601 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character")
    d <- d[4:nrow(d), ]
    if (prodname_ms == "discharge__10601") {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date = "%Y-%m-%d", 
            Time = "%H:%M"), datetime_tz = "America/Anchorage", 
            site_code_col = "River", alt_site_code = list(Oksrukuyik_Creek_2.7 = c("Oksrukuyik Creek", 
                "Oksrukuyik Creek ")), data_cols = c(Discharge..m3.sec. = "discharge"), 
            is_sensor = TRUE, set_to_NA = c("-1111", ""), data_col_pattern = "#V#")
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date = "%Y-%m-%d", 
            Time = "%H:%M"), datetime_tz = "America/Anchorage", 
            site_code_col = "River", alt_site_code = list(Oksrukuyik_Creek_2.7 = c("Oksrukuyik Creek", 
                "Oksrukuyik Creek ")), data_cols = c(Temperature..degree.C. = "temp"), 
            is_sensor = TRUE, set_to_NA = c("-1111", ""), data_col_pattern = "#V#")
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__10601'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1989-2019_Arctic_LTER_Streams_Oksrukuyik_Discharge_csv

This is the "munge kernel" function for discharge__20118:

process_1_20118 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(River = "Kuparuk_River_0.56")
    d <- d[4:nrow(d), ]
    if (prodname_ms == "discharge__20118") {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date = "%Y-%m-%d", 
            Time = "%H:%M"), datetime_tz = "America/Anchorage", 
            site_code_col = "River", data_cols = c(Discharge..m3.sec. = "discharge"), 
            is_sensor = TRUE, set_to_NA = c("-1111", ""), data_col_pattern = "#V#")
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- d %>% rename(temperature = 8)
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date = "%Y-%m-%d", 
            Time = "%H:%M"), datetime_tz = "America/Anchorage", 
            site_code_col = "River", data_cols = c(temperature = "temp"), 
            is_sensor = TRUE, set_to_NA = c("-1111", ""), data_col_pattern = "#V#")
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__20118'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1978-2019_LTER_Streams_Kuparuk_Discharge_csv

This is the "munge kernel" function for discharge__20120:

process_1_20120 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% rename(temp = 7)
    d <- d[4:nrow(d), ]
    if (prodname_ms == "discharge__20120") {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date = "%Y-%m-%d", 
            Time = "%H:%M"), datetime_tz = "America/Anchorage", 
            site_code_col = "River", data_cols = c(Discharge..m3.sec. = "discharge"), 
            is_sensor = TRUE, alt_site_code = list(Roche_Moutonnee_Creek_Main = "Roche Moutonnee Creek", 
                Trevor_Creek_Main = "Trevor Creek"), set_to_NA = c("-9999", 
                "-1111"), data_col_pattern = "#V#", summary_flagcols = "Comments", 
            sampling_type = "I")
        d <- ms_cast_and_reflag(d, summary_flags_to_drop = list(Comments = "ensuring any other comment gets ms_status of 0"), 
            summary_flags_dirty = list(Comments = c("Late season staff gauge", 
                "WINTER")), varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date = "%Y-%m-%d", 
            Time = "%H:%M"), datetime_tz = "America/Anchorage", 
            site_code_col = "River", data_cols = "temp", is_sensor = TRUE, 
            alt_site_code = list(Roche_Moutonnee_Creek_Main = "Roche Moutonnee Creek", 
                Trevor_Creek_Main = "Trevor Creek"), set_to_NA = c("-9999", 
                "-1111"), data_col_pattern = "#V#", summary_flagcols = "Comments", 
            sampling_type = "I")
        d <- ms_cast_and_reflag(d, summary_flags_to_drop = list(Comments = "ensuring any other comment gets ms_status of 0"), 
            summary_flags_dirty = list(Comments = c("Late season staff gauge", 
                "WINTER")), varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__20120'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2015-2019_LTER_Streams_Roche_and_Trevor_Discharge_csv

This is the "munge kernel" function for discharge__1593:

process_1_1593 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1593'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1991_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1594:

process_1_1594 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1594'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1992_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1595:

process_1_1595 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1595'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1993_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1596:

process_1_1596 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1596'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1994_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1597:

process_1_1597 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1597'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1995_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1598:

process_1_1598 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1598'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1996_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1599:

process_1_1599 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1599'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1997_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1600:

process_1_1600 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1600'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1998_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1601:

process_1_1601 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1601'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 1999_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1589:

process_1_1589 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1589'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2000_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1590:

process_1_1590 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1590'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2001_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1591:

process_1_1591 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1591'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2002_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1592:

process_1_1592 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1592'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2003_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1645:

process_1_1645 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1645'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2004_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1644:

process_1_1644 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1644'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2005_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__1646:

process_1_1646 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__1646'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2006_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__10069:

process_1_10069 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__10069'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2007_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__10068:

process_1_10068 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%d-%b-%Y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__10068'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2008_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__10070:

process_1_10070 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main")
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%m/%d/%y %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__10070'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2009_Toolik_Inlet_Kling_csv

This is the "munge kernel" function for discharge__10591:

process_1_10591 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}.csv", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- read.csv(rawfile, colClasses = "character") %>% mutate(site_code = "Toolik_Inlet_Main") %>% 
        rename(Date_Time = 1)
    d <- d[4:nrow(d), ]
    if (grepl("discharge", prodname_ms)) {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%y-%m-%d %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Q_m3sec = "discharge"), data_col_pattern = "#V#", 
            set_to_NA = c("-1111", "-1.111"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
        d <- d %>% mutate(val = val * 1000)
    }
    else {
        d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = c(Date_Time = "%y-%m-%d %H:%M"), 
            datetime_tz = "America/Anchorage", site_code_col = "site_code", 
            data_cols = c(Water_Temp_C = "temp", Conductivity_uScm = "spCond"), 
            data_col_pattern = "#V#", set_to_NA = c("-1111", 
                "-1.111", "-9999"), is_sensor = TRUE)
        d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    }
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'arctic'
prodname_ms = 'discharge__10591'
site_code = <separately, each of: 'sitename_NA', with corresponding component>
component(s) = 
	for site: sitename_NA
		comp(s): 2010Toolik_Inlet_Kling_csv, 2011_Toolik_Inlet_Kling_csv, 2012_Toolik_Inlet_Kling_csv, 2013_Toolik_Inlet_Kling_csv, 2014_Toolik_Inlet_Kling_csv, 2015_Toolik_Inlet_Kling_csv, 2016_Toolik_Inlet_Kling_csv, 2017_Toolik_Inlet_Kling_csv, 2018_Toolik_Inlet_Kling_csv

---

Functions from external packages called inside the kernel function are either
referenced with `<package name>::<function>`, or are called from their aliases, defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/function_aliases.R

For definitions of most MacroSheds functions called, see:

https://github.com/MacroSHEDS/data_processing/blob/master/src/global_helpers.R

Definitions not found there will be found in src/<network>/network_helpers.R or
src/<network>/<domain>/domain_helpers.R, where network is e.g. lter and domain
is e.g. hbef (Hubbard Brook Experimental Forest). For a catalogue of networks
and domains, download our site data table from the Data tab at macrosheds.org.

After all the kernels have completed their jobs, there is a whole suite of
post-processing steps, some of which further modify derived data. See
postprocess_entire_dataset() in global_helpers.R for a list of these.

Note that most MacroSheds functions are wrapped in a decorator function (handle_errors,
defined in global_helpers.R; see tinsel package for details). This decorator is not needed
to run the functions it wraps. To circumvent it, just make sure you don't load
function definitions using tinsel::source_decoratees. This would only happen if you
were to execute MacroSheds code line-by-line, starting from:

https://github.com/MacroSHEDS/data_processing/blob/master/src/acquisition_master.R

Also note that the return value of a munge kernel function may be additionally modified by
a munge engine function. Inside the body of the engine function, you can see where the
munge kernel is retrieved with get() and called via do.call(). Usually, the only additional munging
done by the munge engine (versus the munge kernel) would be to separate
a data file that contains many sites into individual data files of only one site each.
Munge engines are defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/munge_engines.R

Finally, consider that you may clone our entire project from Github and get it running
on your own machine. Getting every component to run will require a file called config.json
at the top level of each project repository (data_processing/ and portal/) with your own
values instead of <...> for each of the following fields:

}
    "gmail_pw": "< >",
    "report_emails": ["<email1>", "<email2 etc>"],
    "variables_gsheet": "https://docs.google.com/spreadsheets/< >",
    "site_data_gsheet": "https://docs.google.com/spreadsheets/< >",
    "delineation_gsheet": "https://docs.google.com/spreadsheets/< >",
    "univ_prods_gsheet:": "https://docs.google.com/spreadsheets/< >",
    "name_variant_gsheet": "https://docs.google.com/spreadsheets/< >",
    "gee_login_<yourname>": "< >",
    "orcid_login_<yourname>": "< >",
    "orcid_pass_<yourname>": "< >",
}

Of course, you won't need connections to the ORCID database or google sheets in order to make headway.
For example, just set config_storage_location = 'local' in your call to ms_init in data_processing/src/acquisition_master.R
and gsheets becomes irrelevant. Our system is not fully set up to bypass the errors that would result from omitting
some of this config information, but workarounds (like commenting lines or inserting tryCatch blocks) should be
possible. This is something we'll be working on in later phases of the project.