
This MacroSheds data product (discharge__ms003) is a "linked product", meaning it was complete after munging and
did not require additional "derived-level" processing. As such, the munged product
was simply linked to our derived product directory and given a standard MacroSheds derived product code.

Source data were retrieved from the following web page(s), static file(s), or web-API endpoint(s)
on the datetime in parentheses:

https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-hbr&identifier=1&revision=17 (retrieved 2024-04-15 23:27:39.964119)

To rebuild all or part of the MacroSheds dataset yourself, use our code on GitHub (and these notes). If you want to
rebuild only this product, or if you want to modify the code used to generate this product, you
will almost certainly have an easier time using these notes. That said, automatic documentation like this may
have some errors and missing details. Please contact us at mail@macrosheds.org if you're having trouble
navigating our docs.

This is the "munge kernel" function for discharge__1:

process_1_1 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}/{c}", n = network, 
        d = domain, p = prodname_ms, s = site_code, c = component)
    d <- ms_read_raw_csv(filepath = rawfile, datetime_cols = c(DATETIME = "%Y-%m-%d %H:%M:%S"), 
        datetime_tz = "Etc/GMT+5", site_code_col = "WS", alt_site_code = list(w1 = c("1", 
            "W1"), w2 = c("2", "W2"), w3 = c("3", "W3"), w4 = c("4", 
            "W4"), w5 = c("5", "W5"), w6 = c("6", "W6"), w7 = c("7", 
            "W7"), w8 = c("8", "W8"), w9 = c("9", "W9")), data_cols = c(Discharge_ls = "discharge"), 
        data_col_pattern = "#V#", is_sensor = TRUE)
    d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    return(d)
}

These were the arguments to that function:

network = 'lter'
domain = 'hbef'
prodname_ms = 'discharge__1'
site_code = <separately, each of: 'w1', 'w2', 'w3', 'w4', 'w5', 'w6', 'w7', 'w8', 'w9', with corresponding component>
component(s) = 
	for site: w1
		comp(s): w1_stmflow_1956-2012, w1_stmflow_2013-2023_5min
	for site: w2
		comp(s): w2_stmflow_1957-2012, w2_stmflow_2013-2023_5min
	for site: w3
		comp(s): w3_stmflow_1957-2012, w3_stmflow_2013-2023_5min
	for site: w4
		comp(s): w4_stmflow_1960-2012, w4_stmflow_2013-2023_5min
	for site: w5
		comp(s): w5_stmflow_1962-2012, w5_stmflow_2013-2023_5min
	for site: w6
		comp(s): w6_stmflow_1963-2012, w6_stmflow_2013-2023_5min
	for site: w7
		comp(s): w7_stmflow_1965-2012, w7_stmflow_2013-2023_5min
	for site: w8
		comp(s): w8_stmflow_1968-2012, w8_stmflow_2013-2023_5min
	for site: w9
		comp(s): w9_stmflow_1995-2012, w9_stmflow_2013-2023_5min



---

Functions from external packages called inside the kernel function are either
referenced with `<package name>::<function>`, or are called from their aliases, defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/function_aliases.R

For definitions of most MacroSheds functions called, see:

https://github.com/MacroSHEDS/data_processing/blob/master/src/global_helpers.R

Definitions not found there will be found in src/<network>/network_helpers.R or
src/<network>/<domain>/domain_helpers.R, where network is e.g. lter and domain
is e.g. hbef (Hubbard Brook Experimental Forest). For a catalogue of networks
and domains, download our site data table from the Data tab at macrosheds.org.

After all the kernels have completed their jobs, there is a whole suite of
post-processing steps, some of which further modify derived data. See
postprocess_entire_dataset() in global_helpers.R for a list of these.

Note that most MacroSheds functions are wrapped in a decorator function (handle_errors,
defined in global_helpers.R; see tinsel package for details). This decorator is not needed
to run the functions it wraps. To circumvent it, just make sure you don't load
function definitions using tinsel::source_decoratees. This would only happen if you
were to execute MacroSheds code line-by-line, starting from:

https://github.com/MacroSHEDS/data_processing/blob/master/src/acquisition_master.R

Also note that the return value of a munge kernel function may be additionally modified by
a munge engine function. Inside the body of the engine function, you can see where the
munge kernel is retrieved with get() and called via do.call(). Usually, the only additional munging
done by the munge engine (versus the munge kernel) would be to separate
a data file that contains many sites into individual data files of only one site each.
Munge engines are defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/munge_engines.R

Finally, consider that you may clone our entire project from Github and get it running
on your own machine. Getting every component to run will require a file called config.json
at the top level of each project repository (data_processing/ and portal/) with your own
values instead of <...> for each of the following fields:

}
    "gmail_pw": "< >",
    "report_emails": ["<email1>", "<email2 etc>"],
    "variables_gsheet": "https://docs.google.com/spreadsheets/< >",
    "site_data_gsheet": "https://docs.google.com/spreadsheets/< >",
    "delineation_gsheet": "https://docs.google.com/spreadsheets/< >",
    "univ_prods_gsheet:": "https://docs.google.com/spreadsheets/< >",
    "name_variant_gsheet": "https://docs.google.com/spreadsheets/< >",
    "gee_login_<yourname>": "< >",
    "orcid_login_<yourname>": "< >",
    "orcid_pass_<yourname>": "< >",
}

Of course, you won't need connections to the ORCID database or google sheets in order to make headway.
For example, just set config_storage_location = 'local' in your call to ms_init in data_processing/src/acquisition_master.R
and gsheets becomes irrelevant. Our system is not fully set up to bypass the errors that would result from omitting
some of this config information, but workarounds (like commenting lines or inserting tryCatch blocks) should be
possible. This is something we'll be working on in later phases of the project.